@charset "utf-8";

// Example 1:
// ---------------
// Input
// @include yak-theme() {
//     .component {
//         color: yak-theme-color('brand');
//     }
// }
//
// Output
// body.theme1 .component {
//     color: #0ea7f4;
// }
// body.theme2 .component {
//     color: #a61717;
// }


// Example 2:
// ---------------
// Input
// @include yak-theme(body, theme) {
//     .component {
//         color: yak-theme-color('brand');
//     }
// }
//
// Output
// body[data-theme="theme1"] .component {
//     color: #0ea7f4;
// }
// body[data-theme="theme2"] .component {
//     color: #a61717;
// }

// Example 3:
// ---------------
// Input
// @include yak-theme(.layout) {
//     .component {
//         color: yak-theme-color('brand');
//     }
// }
//
// Output
// .layout.theme1 .component {
//     color: #0ea7f4;
// }
// .layout.theme2 .component {
//     color: #a61717;
// }


// Example 4:
// ---------------
// Input
// @include yak-theme(.layout, theme) {
//     .component {
//         color: yak-theme-color('brand');
//     }
// }
//
// Output
// .layout[data-theme="theme1"] .component {
//     color: #0ea7f4;
// }
// .layout[data-theme="theme2"] .component {
//     color: #a61717;
// }



$theme-scheme-table: null !global;
$theme-name: null !global;

@mixin yak-theme-init($scheme-table) {
    @if $scheme-table == null {
        @error "[yak-theme] yak-theme-init mixin needs a valid $scheme-table map defined"
    } @else {
        @if variable-exists("sass-themify-scheme-table") {
            @warn "[sass-themify] sass-themify has already been initialized once. Initializing again will replace the previous initialized color scheme"
        }
        $theme-scheme-table: $scheme-table !global;
    }
}

@mixin yak-theme($element: "body", $attr: null, $default: false) {
    @if $theme-scheme-table == null {
        @error "[yak-theme] please init a valid $scheme-table map with yak-theme-init mixin"
    }
    // determine if global variable has been declared or not
    @if not variable-exists("theme-name") {
        $theme-name: null !global;
    }

    @each $name, $color-map in $theme-scheme-table {
        $theme-name: $name !global;

        @if $attr != null {
            @if $name != "default" {
                #{$element}[data-#{$attr}="#{$theme-name}"] {
                    @content;
                }
            } @else if ($default) {
                #{$element} {
                    @content;
                }
            }
        } @else {
            @if $name != "default" {
                #{$element}.#{$theme-name} {
                    @content;
                }
            } @else if($default and $element != 'body') {
                #{$element} {
                    @content;
                }
            }
        }

        $theme-name: null !global;
    }
}

@function yak-theme-map-get-strict($map, $key) {
    @if map-has-key($map, $key) {
        @return map-get($map, $key);
    } @else {
        @error "ERROR: Specified index does not exist in the mapping";
    }
}

@function yak-theme-get-map-deep($map, $keys...) {
    @each $key in $keys {
        $map: yak-theme-map-get-strict($map, $key);
    }
    @return $map;
}

@function yak-theme-get-color($component, $important: "") {
    @if $theme-scheme-table == null {
        @error "[theme] You need to call theme mixin to initialize a theme before you can call the theme-get-color function.";
    }
    @if $theme-name == null {
        @error "[theme] theme-get-color function can only be used within the scope of the 'theme' mixin.";
    }

    $found: yak-theme-get-map-deep($theme-scheme-table, $theme-name, $component);

    @if $important == "!important" {
        @if $theme-name != 'default' {
            $found: #{$found + " " + $important};
        }
    } @else if($important != '') {
        @error "[theme] the second parameter must be `!important`";
    }

    @return $found;
}

@function yak-theme-color($component, $important: "") {
    @return yak-theme-get-color($component, $important);
}

@function yak-theme-get-name() {
    @return $theme-name;
}




