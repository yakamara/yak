@charset "utf-8";

@mixin yak-clearfix() {
    &::after {
        clear: both;
        content: "";
        display: block;
    }
}

@mixin yak-gutter($grids: $grids) {
    padding-left: map-get(nth(map-values($grids), 1), 'gutter') / 2;
    padding-right: map-get(nth(map-values($grids), 1), 'gutter') / 2;

    @each $key, $grid in $grids {
        @if map-has-key($grid, 'media') {
            @include grid-media($grid) {
                padding-left: (map-get($grid, 'gutter') / 2);
                padding-right: (map-get($grid, 'gutter') / 2);
            }
        }
    }
}

@mixin yak-gutter-factor($property, $factor, $grids: $grids) {
    #{$property}: map-get(nth(map-values($grids), 1), 'gutter') / 2 * $factor;

    @each $key, $grid in $grids {
        @if map-has-key($grid, 'media') {
            @include grid-media($grid) {
                #{$property}: (map-get($grid, 'gutter') / 2) * $factor;
            }
        }
    }
}

@mixin yak-gutter-margin($negative: false, $grids: $grids) {
    $factor: if($negative,  -2, 2);
    margin-left: map-get(nth(map-values($grids), 1), 'gutter') / $factor;
    margin-right: map-get(nth(map-values($grids), 1), 'gutter') / $factor;

    @each $key, $grid in $grids {
        @if map-has-key($grid, 'media') {
            @include grid-media($grid) {
                margin-left: (map-get($grid, 'gutter') / $factor);
                margin-right: (map-get($grid, 'gutter') / $factor);
            }
        }
    }
}

@mixin yak-outer-container($grids: $grids) {
    position: relative;
    width: 100%;
    margin-left: auto;
    margin-right: auto;

    @each $key, $grid in $grids {
        @if map-has-key($grid, 'media') {
            @include grid-media($grid) {
                max-width: map-get($grid, 'container');
            }
        }
    }

    @include yak-gutter($grids);
}

@mixin yak-container($grids: $grids) {
    display: flex;
    flex-wrap: wrap;
    margin-left: map-get(nth(map-values($grids), 1), 'gutter') / -2;
    margin-right: map-get(nth(map-values($grids), 1), 'gutter') / -2;

    @each $key, $grid in $grids {
        @if map-has-key($grid, 'media') {
            @include grid-media($grid) {
                margin-left: (map-get($grid, 'gutter') / -2);
                margin-right: (map-get($grid, 'gutter') / -2);
            }
        }
    }
}

@mixin yak-column($columns, $grids: $grids) {
    $size: $columns / $grid-columns;
    @if length($columns) > 1 {
        $size: nth($columns, 1) / _neat-parse-columns($columns);
    }

    position: relative;

    // Safari Bug
    //--flex: 0 0 percentage($size);
    flex: 0 0 auto;

    width: percentage($size);

    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage($size);
    min-height: 1px;

    @include yak-gutter($grids);
}


@function yak-percent($columns) {
    $size: $columns / $grid-columns;
    @if length($columns) > 1 {
        $size: nth($columns, 1) / _neat-parse-columns($columns);
    }

    @return percentage($size);
}


@mixin yak-width($columns, $prefix: '') {

    $size: $columns / $grid-columns;
    @if length($columns) > 1 {
        $size: nth($columns, 1) / _neat-parse-columns($columns);
    }

    @if $prefix == 'min' or $prefix == 'max' {
        $prefix: "#{$prefix}-";
    } @else {
        $prefix: '';
    }
    #{$prefix}width: percentage($size);
}

@mixin yak-push($columns) {
    $size: $columns / $grid-columns;
    @if length($columns) > 1 {
        $size: nth($columns, 1) / _neat-parse-columns($columns);
    }
    margin-left: percentage($size);
}

@mixin yak-shift($columns) {
    $size: $columns / $grid-columns;
    @if length($columns) > 1 {
        $size: nth($columns, 1) / _neat-parse-columns($columns);
    }
    position: relative;
    left: percentage($size);
}


@mixin yak-visual($color: null, $grid: $neat-grid) {
    @if $env == 'dev' and $grid-visual == true {
        &:after {
            content: '';
            display: block;
            position: absolute;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
            z-index: 1000;
            @include grid-visual($grid: nth(map-values($grids), 1));
            margin-left: map-get(nth(map-values($grids), 1), 'gutter') / -2;
            margin-right: map-get(nth(map-values($grids), 1), 'gutter') / -2;

            @each $key, $grid in $grids {
                @if map-has-key($grid, 'media') {
                    @include grid-media($grid) {
                        @include grid-visual();
                        margin-left: (map-get($grid, 'gutter') / -2);
                        margin-right: (map-get($grid, 'gutter') / -2);
                    }
                }
            }
        }
    }
}


@mixin yak-equal-width() {
    flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;
}


@mixin yak-create-grid($gridAll) {
    @each $columns, $grids in $gridAll {
        @include mq($from: sm) {
            [data-case-grid] {
                > * {
                    margin-top: vr(1);
                }
            }

            @each $gridName, $grid in $grids {
                [data-case-grid="#{$gridName}"] {
                    > *:nth-child(-n+#{$columns}) {
                        margin-top: 0;
                    }
                }
            }
        }
    }
}
