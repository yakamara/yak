@charset "utf-8";

//== Environment
//====================================================
$env: 'dev' !default;


//== Project Variables
//====================================================
//====================================================


//== Root font sizes
//====================================================
$base-font-sizes: (
    xs: 12px,
    sm: 14px,
    lg: 16px,
);
$base-line-height: 1.5;


//== Grid
//====================================================
$grids: (
    xs: (
        container: 100%,
        columns: 6,
        gutter: 2.5rem,
    ),
    sm: (
        container: 100%,
        columns: 12,
        gutter: 2.5rem,
        media: 768px,
    ),
    md: (
        container: 100%,
        columns: 12,
        gutter: 1.875rem,
        media: 992px,
    ),
    lg: (
        container: 75rem,
        columns: 12,
        gutter: 1.875rem,
        media: 1200px,
    ),
    xl: (
        container: 75rem,
        columns: 12,
        gutter: 1.875rem,
        media: 1600px,
    ),
    xxl: (
        container: 75rem,
        columns: 12,
        gutter: 1.875rem,
        media: 2100px,
    )
);
//$grid-container-max-width: 76.875rem;
//$container-max-width: 73.125rem;
$grid-columns: 12;
$grid-gutter: 1.875rem;

$grid-visual: true;
$grid-watson-breakpoint: map-get(map-get($grids, sm), media);

//== Paths
//====================================================
//== Asset Path
$asset-path: "/assets";

//== Media Path
$media-path: "/media";

//== Font Path
$font-path: "../fonts";

//== Image Path
$img-path: "../images";

//== SVG File
$svg-file: "../svgs/svgs.svg";




//== Font sizes
// (internal variable will be merged to $typi)
//====================================================
// line-height: multiple of the base line height for each font size
// line-height = base-line-height / 2 * factor / font-size
// null: (2.75em, 1.25)
// example: 1.25 = 1.375 / 2 * 5 / 2.75
$_font-sizes: (
    base: (
        null: (map-get($base-font-sizes, xs), $base-line-height),
        sm: (map-get($base-font-sizes, sm), $base-line-height),
        lg: (map-get($base-font-sizes, lg), $base-line-height),
    ),
    l1: (
        null: (2.25em, 1.333), // 36 / 48
    ),
    l2: (
        null: (1.5em, 2), // 24 / 48
    ),
    l3: (
        null: (1.25em, 1.4), // 20 / 28
    ),
    l4: (
        null: (1.125em, 1.625), // 18 / 26
    ),
    l5: (
        null: (1em, 1.5), // 16 / 24
        //sm: (1em, 1.25),       // 16 / 20
        //lg: (1em, 1.5),        // 16 / 24
    ),
    l6: (
        //null: (1.167em, 1.428), // 14 / 20
        //sm: (1.167em, 1.571),   // 14 / 20
        //lg: (1.0625em, 1.412),  // 17 / 24
    ),
    init: (
        null: (.9375em, 1.5) // 15
    ),
    s1: (
        null: (.8125em, 1.54), // 13 / 20
    ),
    button-base: (
        null: (.9375em, 2.4),  // 15 / 36
    ),
    button-large: (
        null: (1.125em, 2.22), // 18 / 40
    ),
);

$_other-font-sizes: (
    //button-large: map-get($_font-sizes, 'l5'),
    button-small: map-get($_font-sizes, 'button-base'),
);


//== Colors
// (internal variable will be merged to $yak-colors)
//====================================================
$_colors: (
    primary: (
        lighter: #26A482,
        light: #00916A,
        base: #007455,
    ),
    default: (
        lightest: #FFF,
        lighter: #F4F4F2,
        light: #DCDBD8,
        base: #D0CEC2,
        dark: #999,
        darker: #666666,
        darkest: #222,
    ),
    alert: (
        error: #B41919,
        info: #666,
        success: #007455,
    ),
    state: (
        logout: #B41919,
    )
);



$transition-duration: 200ms;
$transition-timing: ease-in-out;
$transition-base: all $transition-duration $transition-timing;


$header-heights: (
    base: (
        xs: 48px / map-get($base-font-sizes, xs) * 1rem,
        sm: 74px / map-get($base-font-sizes, sm) * 1rem,
        lg: 104px / map-get($base-font-sizes, lg) * 1rem,
    )
);

$svg-sizes: (
    logo: (
        header: (
            xs: (
                width: (246px / map-get($base-font-sizes, xs)) * 1rem,
                height: (36px / map-get($base-font-sizes, xs)) * 1rem,
            ),
            sm: (
                width: 246px / map-get($base-font-sizes, sm) * 1rem,
                height: 36px / map-get($base-font-sizes, sm) * 1rem,
            ),
            lg: (
                width: 314px / map-get($base-font-sizes, lg) * 1rem,
                height: 46px / map-get($base-font-sizes, lg) * 1rem,
            ),
        ),
        header-shrink: (
            sm: (
                width: 45px / map-get($base-font-sizes, sm) * 1rem,
                height: 20px / map-get($base-font-sizes, sm) * 1rem,
            ),
            lg: (
                width: 65px / map-get($base-font-sizes, lg) * 1rem,
                height: 30px / map-get($base-font-sizes, lg) * 1rem,
            ),
        )
    )
);




$z-index-hamburger-menu: 2000;

//== Hamburgers Variables
$hamburger-padding-x: 0;
$hamburger-padding-y: 0;
$hamburger-types: (spring);
$hamburger-layer-width: 22px;
$hamburger-layer-height: 1px;
$hamburger-layer-spacing: 6px;
$hamburger-layer-border-radius: 0;
$hamburger-layer-color: #fff;
$hamburger-hover-opacity: 1;





//== mq-sass Variables
//====================================================
//-- Breakpoint list
$mq-breakpoints: ('watson': $grid-watson-breakpoint);
//$mq-breakpoints: ();
@each $key, $grid in $grids {
    @if map-has-key($grid, 'media') {
        $breakpoint: ($key: map-get($grid, 'media'));
        $mq-breakpoints: map-merge($mq-breakpoints, $breakpoint);
    }
};

// Show breakpoints in the top right corner
$mq-show-breakpoints: ();
@if $env == 'dev' {
    $mq-show-breakpoints: (sm, md, lg);
}

//== Neat Variables
//====================================================
$neat-grid: (
    columns: map-get(map-get($grids, xs), columns),
    gutter:  map-get(map-get($grids, xs), gutter),
);


//== Typi Variables
//====================================================
$breakpoints: (
    sm: map-get(map-get($grids, sm), media),
    lg: map-get(map-get($grids, lg), media),
);

$typefaces: (
    primary: (
        cap-height: .72,
        font-size-ratio: 1,
        stack: ("Roboto", serif),
        weights: (
            300: 300,
            400: 400,
            500: 500,
            700: 700
        ),
    ),
);

$typi: map-merge($_font-sizes, $_other-font-sizes);




//== Yak Variables
//====================================================
$yak-caret-width: .3em;
$yak-colors: $_colors;
$yak-color-contrast-dark: #212121 !default;
$yak-color-contrast-light: #FFF !default;
$yak-color-key: 'base';
$yak-color-interval: 8% !default;
$yak-opacities: (
    light: 0.8,
    dark: 0.4,
);
